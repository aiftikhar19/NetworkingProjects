Author: Aisha Iftikhar
Class: CSE 5462
Assignment: Lab 6
Date: 3/23/20

I've tested this lab with: 
Weilie Lin
Frank Cerny

Description:
This project implements a server side UDP protocol for a version of tic-tac-toe played on different machines. The server can play multiple games simultaneously and generates moves automatically, requiring no user input. The server can handle lost and duplicate packets. 

	tictactoeServer <remote-port-number>

<remote port number> is the port number from the server side script 

Requirements:
1. Provide the client with the server's IP address and chosen port number. The server must be up and running before any client can connect to it. 
2. Ensure you have the troll program in the same directory as the server. 
3. Message format:
	1 byte 		1 byte		 1 byte		1 byte		1 byte				1 byte
	Unsigned int	Unsigned int	 Unsigned int	Unsigned int	Unsigned int			Unsigned int
	Version Number	Connection Code Response Code	Player Move	Turn Number(Starts at 0)	Game Number
4. Response Codes (Version 3):
	0	No errors
	1	Invalid Move: the requested move cannot be performed given the current board configuration
	2	Game Out of Sync: the turn number is invalid (out of sync)
	3	Invalid Request
	4	Game Over: sent along with game ending move
	5	Game Over Acknowledged: sent as acknowledgement of game over
	6	Incompatible Version Number: the version number is incompatible with local version
	7	Server is busy: Sent by server in response to new game request
	8 	Game number mismatch: the game number received is not valid

Commands:
To compile the program to run, use the command:
	make
To remove the executable and re-compile, use the commands:
	make clean
	make

Known Behaviour:
1. If a new game request from the client is sent and received by the server, but the server's first move is dropped, then the client typically resends the new game request before the server can respond. Therefore, two games can be created from a single client game request. 
